/*
 * Copyright 2018 natanbc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'cpp'
    id 'c'
}

apply from: 'toolchains.gradle'

def cpuFeaturesSources = targets.collectEntries { target ->
    String cpu
    if(isX86(target)) {
        cpu = "x86"
    } else if(isArm32(target)) {
        cpu = "arm"
    } else if(isArm64(target)) {
        cpu = "aarch64"
    } else {
        throw new Exception("Unsupported target '$target'")
    }
    return [target, "cpuinfo_${cpu}.c"]
}

model {
    //noinspection GroovyAssignabilityCheck
    components {
        detector(NativeLibrarySpec) {
            targets.each { targetPlatform it }
            sources {
                cpp {
                    source {
                        srcDir "src/main/cpp"
                        include "**/*.cpp"
                    }
                    exportedHeaders {
                        srcDir "cpu_features/include"
                    }
                }
            }
            binaries.all {
                cCompiler.define "STACK_LINE_READER_BUFFER_SIZE", "1024"
                cCompiler.define "HAVE_STRONG_GETAUXVAL"
                def platform = it.targetPlatform
                def file = cpuFeaturesSources[platform.name]
                def unix = isUnix(platform)
                def x86 = isX86(platform)
                sources {
                    c(CSourceSet) {
                        source {
                            srcDir "cpu_features/src"
                            include file, "filesystem.c", "string_view.c", "stack_line_reader.c"
                            if(unix && !x86) {
                                include "unix_features_aggregator.c", "hwcaps.c"
                            }
                        }
                        exportedHeaders {
                            srcDir "cpu_features/include"
                        }
                    }
                }
            }
        }
    }
    binaries {
        all {
            lib library: 'jni', linkage: 'api'

            if(toolChain in VisualCpp) {
                cppCompiler.args '/std:c++17'
                cppCompiler.args "/Ox"
                cCompiler.args "/Ox"
            } else if(toolChain in Gcc || toolChain in Clang) {
                cppCompiler.args '-std=c++17'
                cppCompiler.args "-O3 -g"
                cCompiler.args "-O3 -g"
            }

            if(isFreebsd(targetPlatform)) {
                lib library: 'freebsd_headers', linkage: 'api'
            }
        }
    }
}

tasks.withType(LinkSharedLibrary) {
    def filename = it.installName.get()
    def arch = targetDirectoryName(it.targetPlatform.get())
    if(arch.contains("darwin")) {
        filename = filename.replace(".so", ".dylib")
    }
    def newPath = new File(rootProject.projectDir, "src/main/resources/natives/" + arch + "/" + filename).getAbsoluteFile()
    newPath.getParentFile().mkdirs()
    it.linkedFile.set(newPath)
    taskForTarget(it.targetPlatform.get()).dependsOn it
}
