import org.apache.tools.ant.taskdefs.condition.Os

task buildLinuxGlibcArm {}

task buildLinux {
    dependsOn buildLinuxGlibcArm
}

static def platformName(p) {
    if(p instanceof String) {
        return p
    }
    return p.name
}

def targetDirectory = [
        linux_glibc_arm: "linux-arm"
]

project.ext.targetDirectoryName = { platform ->
    def r = targetDirectory[platformName(platform)]
    if(r == null) {
        throw new Exception("Invalid target '${platform}'")
    }
    return r
}

def tasksByTarget = [
        linux_glibc_arm:     buildLinuxGlibcArm
]

project.ext.taskForTarget = { platform ->
    def t = tasksByTarget[platformName(platform)]
    if(t == null) {
        throw new Exception("Invalid target '${platform}'")
    }
    return t
}

project.ext.targets = tasksByTarget.keySet()

project.ext.isDarwin = { platform ->
    return platformName(platform).startsWith("darwin_")
}
project.ext.isFreebsd = { platform ->
    return platformName(platform).startsWith("freebsd_")
}
project.ext.isLinux = { platform ->
    return platformName(platform).startsWith("linux_")
}
project.ext.isWindows = { platform ->
    return platformName(platform).startsWith("windows_")
}
project.ext.isUnix = { platform ->
    return isDarwin(platform) || isFreebsd(platform) || isLinux(platform)
}
project.ext.isMusl = { platform ->
    return platformName(platform).startsWith("linux_musl_")
}

project.ext.isX86 = { platform ->
    def arch = platformName(platform)
    return arch.endsWith("x86") || arch.endsWith("x86_64")
}
project.ext.isX86_32 = { platform ->
    return platformName(platform).endsWith("x86")
}
project.ext.isX86_64 = { platform ->
    return platformName(platform).endsWith("x86_64")
}
project.ext.isArm = { platform ->
    def arch = platformName(platform)
    return arch.endsWith("arm") || arch.endsWith("aarch64")
}
project.ext.isArm32 = { platform ->
    return platformName(platform).endsWith("arm")
}
project.ext.isArm64 = { platform ->
    return platformName(platform).endsWith("aarch64")
}

def base_jni_include = System.getProperty("java.home") + '/include'
def os_jni_include = base_jni_include + '/' + (Os.isFamily(Os.FAMILY_WINDOWS) ? 'win32' : Os.isFamily(Os.FAMILY_MAC) ? 'darwin' : 'linux')
def freebsd_sysroot = new File(rootProject.projectDir, 'freebsd_sysroot')

model {
    toolChains {
        visualCpp(VisualCpp)
        glibc(Gcc) {
            target("linux_glibc_arm") {
                cCompiler.executable 'arm-linux-gnueabihf-gcc'
                cppCompiler.executable 'arm-linux-gnueabihf-g++'
                linker.executable 'arm-linux-gnueabihf-g++'
                staticLibArchiver.executable 'arm-linux-gnueabihf-ar'
                
                cCompiler.withArguments { args -> args << '-fno-stack-protector' }
                cppCompiler.withArguments { args -> args << '-fno-stack-protector' }
                linker.withArguments { args -> args << '-fno-stack-protector' }
                }
        }
        }
    }
    platforms {
        linux_glibc_arm {
            architecture "arm"
            operatingSystem "linux"
        }
    }
    repositories {
        libs(PrebuiltLibraries) {
            jni {
                headers.srcDirs base_jni_include, os_jni_include
            }
            freebsd_headers {
                headers.srcDirs new File(freebsd_sysroot, "usr/include"),
                        new File(freebsd_sysroot, "usr/include/x86")
            }
        }
    }

